Completed Tasks (Python 3)

Interview Question Date: February 2022

Asana Medium
Active Interview ID 2096

Description:

Find the number of tasks completed in January 2022 by users who work at ClassPass. 
The completed tasks are these rows in the asana_actions table with 'action_name' equal to CompleteTask. 
Note that each row in the dataset indicates how many actions of a certain type one user has performed in one day
and the number of actions is stored in the 'num_actions' column.

Output the ID of the user and the number of tasks they completed. 
If a user from this company did not complete any tasks in the given period of time, you should still output their ID and the number 0 in the second column.

asana_users

user_id:  int64
name:     object
surname:  object
company:  object

asana_actions

user_id:      int64
date:         datetime64[ns]
num_actions:  int64
action_name:  object

Solution:

# Import your libraries
import pandas as pd

# Filter our first dataframe by removing everyone not in "ClassPass"
asana_users_new = asana_users[asana_users['company'] == 'ClassPass']

# Do all out filtering on the second dataframe, as specified in the problem.
# I performed each of these restrictions on their seperate line because I wanted to check each time that I was removing the correct rows.
# A final solution would combine all of these restrictions into one line.

asana_actions_new = asana_actions[asana_actions['date'].dt.year == 2022]
asana_actions_new = asana_actions_new[asana_actions_new['date'].dt.month == 1]
asana_actions_new = asana_actions_new[asana_actions_new['action_name'] == 'CompleteTask']

# Merge the dataframes together. We needed a left join here, and not the usual merge, because we wanted to include every user_id, even if they
# didn't have any CompletedTasks.

df = asana_users_new.merge(asana_actions_new, how='left', on = 'user_id')

# Finally, group by the user_id and count the times they completed tasks

df = df.groupby(['user_id'])['action_name'].count().reset_index()

Output: 

user_id	  action_name
161	      2
163	      0
164	      4

Discussion:

These problems appear to much more easily solved in SQL, rather than python. This makes sense to me, as SQl is a purpose specific language, made for 
exactly this sort of purpose. Whereas Python and R and much more multi use. We still need to be able to do these sorts of data cleaning exercises in
python, however, since it is used for Data analysis, visualizations, and Machine learning.
